---
layout: post
title:  "CRNC.work Social Production MOOC"
date:   2015-08-31 12:00:00
categories: Networking Technoloogy
---


Social production or [commons-based peer production (CBPP)](https://en.wikipedia.org/wiki/Commons-based_peer_production) is primarily about a productivity-driven collaborative culture.  The point of CBPP is greater productivity and speed, but another result is that [for those who can handle it] work is more fun.   

CBPP covers many different types of intellectual output, from open source software to data APIs to human-readable blogs, wikipedias, peer-reviewed articles and more. CBPP has been enabled by technoloogies that are primarily internet-based to allow for coordination between distributed groups of individuals working on a single project or even crowds of volunteers working on something like Wikipedia.  An absolutely fundamental building block of CBPP has been some form of revision-controlled process to track and rollback and attribute and merge different contributions to produce a coherent, unified intellectual product.

Making one's professional contribution more valuable has always required serious effort to listen but it is increasingly necessarily to "think like a native speaker" when it comes distributed revision-control systems to understand and make sense of the chaotic combinations of simultaneous ideas and revisions.  Make knowledge more relevant is matter of more genuinely being plugged into the NETWORK.  

# Collaboration does not just happen; supporting a holarchic, self-organizing, self-empowering team takes the diligent effort of an aggressive [campaign](http://dictionary.reference.com/browse/campaign)
Campaigning is about putting yourself out there and taking the chance that someone doesn't like you. Fear prevents the ability to take risks, which dampens experimentation and potential is not be realized. We drive out fear by substituting leadership and that means STEPPING FORWARD in a meaningful way -- that means applying business intelligence and finding the most appropriate battlegrounds for your campaign.

# Encourage a quality-driven leadership mindset in ALL behaviors; inhabit the mindset of leadership
A culture of collaborative leadership must be practiced mindfully and continually reinforced. Every aspect of execution matters. Quality leadership is not for sissies or people who resort to distractions, crutches and escapism when the going gets tough; collaborative thinking must be reflected in ALL practices, all processes, all logistics, all actions ... nonstop, 24X7.

# Lead by promoting communication, collaboration and competition among team members
Stop wasting your time on people who will not help themselves. Team members must be able to get along, to interact and challenge one another AND each team member must be capable of getting the team unstuck when the team gets stuck.  Get along and getting unstuck is about THINKING and especially about trying to think differently in order to understand other points of view ... it is important to work at understanding other points of view AND it also important to limit the time wasted on those who simply never try to understand others.  

# Motivate and energize your team in ways that channel conflict
Doing hard things is frustrating and inevitably leads to disagreements and conflict. It is necessary to use humor, teasing, practical jokes, dialogue and just getting out, giving things a try, traveling and actually doing different things to promote thinking differently ... it's not bad to have conflict; it's bad to give up, hunker down, stick to old ways and blame others for the conflict [that is a result of frustration that will be encountered in doing serious, challenging hard research and development].

# Work with large national or even globally distributed teams
Travel is still necessary, but should not be the first resort ... you can only be one place at a time; work where you can most comfortably get things accomplished without getting sidetracked. Greater proficiency in the digital realm is increasingly necessary. Work will continue to change and you will have to adapt. Get used to adapting to change and profiting from change and speed of adaptation; thinking DIFFERENT about distributed work is more necessary now than it ever has been in human history.

**Distributed workflow must be especially LEAN ... [use D.O.W.N.T.I.M.E. to see waste](https://docs.google.com/presentation/d/15TSMzjMqcR4-7Dmnsymgq8yRCHGbZbOEMRHbcUtTnV8/edit?usp=sharing) ... become a master of kanban techniques**

* Set clear, manageable objectives ... inbox, analyze, dev, test, *crunch*

* Limit WIP ... focus on the ONE big thing that matters most, do it first

* Manage flow ... 5S WIP, shine, sort, simplify, standardize, sustain

* Make process simple, routine and explicit so no one drifts off the trail

* Implement feedback loops ... repo chat, face-to-face, but NOT meetings

* Evolve collaboratively ... improve your ability to work more socially


# Bear down on workflow-as-code discipline and practice agile mechanics if only just to get practice
Some days, often in fact, it is important to just stay at it, to just try to do something shippable [even if it is teensy] ... stick with a workflow, try things and persevere ... when professionals find themselves in what feels like a slump, they just smile and work harder on the basics, bear down and focus because they know that tougher times weed out the weaklings.  It is particularly necessary during tough times to find a way to get things out there, to SHIP.  Patton reputabaly said: “A good plan violently executed now is better than a perfect plan next week”.  That is why code SPRINTS, for example, have radically-constrained goals in order to focus.  Make your code readable and sensible, and don't try to be clever.  All activities (design, code, integrate, test) are performed to create a one particular feature in one sprint.  We want sprints to be SMALL because with incremental additions to feature sets we can do a better job of ensuring that we have achieved a solid return on investment (ROI) delivered from each sprint ... and if not, we can make adjustments.
